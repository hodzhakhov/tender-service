//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Review = newReviewTable("public", "review", "")

type reviewTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	BidID     postgres.ColumnInteger
	Username  postgres.ColumnString
	Comment   postgres.ColumnString
	CreatedAt postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ReviewTable struct {
	reviewTable

	EXCLUDED reviewTable
}

// AS creates new ReviewTable with assigned alias
func (a ReviewTable) AS(alias string) *ReviewTable {
	return newReviewTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ReviewTable with assigned schema name
func (a ReviewTable) FromSchema(schemaName string) *ReviewTable {
	return newReviewTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ReviewTable with assigned table prefix
func (a ReviewTable) WithPrefix(prefix string) *ReviewTable {
	return newReviewTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ReviewTable with assigned table suffix
func (a ReviewTable) WithSuffix(suffix string) *ReviewTable {
	return newReviewTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newReviewTable(schemaName, tableName, alias string) *ReviewTable {
	return &ReviewTable{
		reviewTable: newReviewTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newReviewTableImpl("", "excluded", ""),
	}
}

func newReviewTableImpl(schemaName, tableName, alias string) reviewTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		BidIDColumn     = postgres.IntegerColumn("bid_id")
		UsernameColumn  = postgres.StringColumn("username")
		CommentColumn   = postgres.StringColumn("comment")
		CreatedAtColumn = postgres.TimestampColumn("created_at")
		allColumns      = postgres.ColumnList{IDColumn, BidIDColumn, UsernameColumn, CommentColumn, CreatedAtColumn}
		mutableColumns  = postgres.ColumnList{BidIDColumn, UsernameColumn, CommentColumn, CreatedAtColumn}
	)

	return reviewTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		BidID:     BidIDColumn,
		Username:  UsernameColumn,
		Comment:   CommentColumn,
		CreatedAt: CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
