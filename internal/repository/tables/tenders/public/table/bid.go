//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Bid = newBidTable("public", "bid", "")

type bidTable struct {
	postgres.Table

	// Columns
	ID              postgres.ColumnInteger
	Name            postgres.ColumnString
	Description     postgres.ColumnString
	Status          postgres.ColumnString
	TenderID        postgres.ColumnInteger
	OrganizationID  postgres.ColumnString
	CreatorUsername postgres.ColumnString
	Version         postgres.ColumnInteger
	CreatedAt       postgres.ColumnTimestamp
	UpdatedAt       postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type BidTable struct {
	bidTable

	EXCLUDED bidTable
}

// AS creates new BidTable with assigned alias
func (a BidTable) AS(alias string) *BidTable {
	return newBidTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new BidTable with assigned schema name
func (a BidTable) FromSchema(schemaName string) *BidTable {
	return newBidTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new BidTable with assigned table prefix
func (a BidTable) WithPrefix(prefix string) *BidTable {
	return newBidTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new BidTable with assigned table suffix
func (a BidTable) WithSuffix(suffix string) *BidTable {
	return newBidTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newBidTable(schemaName, tableName, alias string) *BidTable {
	return &BidTable{
		bidTable: newBidTableImpl(schemaName, tableName, alias),
		EXCLUDED: newBidTableImpl("", "excluded", ""),
	}
}

func newBidTableImpl(schemaName, tableName, alias string) bidTable {
	var (
		IDColumn              = postgres.IntegerColumn("id")
		NameColumn            = postgres.StringColumn("name")
		DescriptionColumn     = postgres.StringColumn("description")
		StatusColumn          = postgres.StringColumn("status")
		TenderIDColumn        = postgres.IntegerColumn("tender_id")
		OrganizationIDColumn  = postgres.StringColumn("organization_id")
		CreatorUsernameColumn = postgres.StringColumn("creator_username")
		VersionColumn         = postgres.IntegerColumn("version")
		CreatedAtColumn       = postgres.TimestampColumn("created_at")
		UpdatedAtColumn       = postgres.TimestampColumn("updated_at")
		allColumns            = postgres.ColumnList{IDColumn, NameColumn, DescriptionColumn, StatusColumn, TenderIDColumn, OrganizationIDColumn, CreatorUsernameColumn, VersionColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns        = postgres.ColumnList{NameColumn, DescriptionColumn, StatusColumn, TenderIDColumn, OrganizationIDColumn, CreatorUsernameColumn, VersionColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return bidTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:              IDColumn,
		Name:            NameColumn,
		Description:     DescriptionColumn,
		Status:          StatusColumn,
		TenderID:        TenderIDColumn,
		OrganizationID:  OrganizationIDColumn,
		CreatorUsername: CreatorUsernameColumn,
		Version:         VersionColumn,
		CreatedAt:       CreatedAtColumn,
		UpdatedAt:       UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
