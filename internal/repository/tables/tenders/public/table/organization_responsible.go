//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var OrganizationResponsible = newOrganizationResponsibleTable("public", "organization_responsible", "")

type organizationResponsibleTable struct {
	postgres.Table

	// Columns
	ID             postgres.ColumnString
	OrganizationID postgres.ColumnString
	UserID         postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type OrganizationResponsibleTable struct {
	organizationResponsibleTable

	EXCLUDED organizationResponsibleTable
}

// AS creates new OrganizationResponsibleTable with assigned alias
func (a OrganizationResponsibleTable) AS(alias string) *OrganizationResponsibleTable {
	return newOrganizationResponsibleTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new OrganizationResponsibleTable with assigned schema name
func (a OrganizationResponsibleTable) FromSchema(schemaName string) *OrganizationResponsibleTable {
	return newOrganizationResponsibleTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new OrganizationResponsibleTable with assigned table prefix
func (a OrganizationResponsibleTable) WithPrefix(prefix string) *OrganizationResponsibleTable {
	return newOrganizationResponsibleTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new OrganizationResponsibleTable with assigned table suffix
func (a OrganizationResponsibleTable) WithSuffix(suffix string) *OrganizationResponsibleTable {
	return newOrganizationResponsibleTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newOrganizationResponsibleTable(schemaName, tableName, alias string) *OrganizationResponsibleTable {
	return &OrganizationResponsibleTable{
		organizationResponsibleTable: newOrganizationResponsibleTableImpl(schemaName, tableName, alias),
		EXCLUDED:                     newOrganizationResponsibleTableImpl("", "excluded", ""),
	}
}

func newOrganizationResponsibleTableImpl(schemaName, tableName, alias string) organizationResponsibleTable {
	var (
		IDColumn             = postgres.StringColumn("id")
		OrganizationIDColumn = postgres.StringColumn("organization_id")
		UserIDColumn         = postgres.StringColumn("user_id")
		allColumns           = postgres.ColumnList{IDColumn, OrganizationIDColumn, UserIDColumn}
		mutableColumns       = postgres.ColumnList{OrganizationIDColumn, UserIDColumn}
	)

	return organizationResponsibleTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		OrganizationID: OrganizationIDColumn,
		UserID:         UserIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
